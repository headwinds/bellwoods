var queue = [];
var parentQueue = [];

var index = (function (insertRule) {
  return function insertionPlugin(context, content, selectors, parents, line, column, length, id) {
    switch (context) {
      case -2:
        {
          queue.forEach(insertRule);
          queue = [];
          parentQueue = [];
          break;
        }

      case 2:
        {
          if (id === 0) {
            var selector = selectors.join(',');
            var parent = parents.join(',');
            var rule = selector + '{' + content + '}';
            var index = parentQueue.indexOf(selector);
            if (index === -1) {
              index = parentQueue.length;
            } else {
              var _length = queue.length;
              while (_length--) {
                if (parentQueue[_length] === selector) {
                  parentQueue[_length] = undefined;
                }
              }
            }
            queue.splice(index, 0, rule);
            parentQueue.splice(index, 0, parent);
          }
          break;
        }
      // after an at rule block
      case 3:
        {
          var _parent = parents.join(',');
          parentQueue.push(_parent);
          var chars = selectors.join('');
          var second = chars.charCodeAt(1);
          var child = content;
          switch (second) {
            // s upports
            case 115:
            // d ocument
            // eslint-disable-next-line no-fallthrough
            case 100:
            // m edia
            // eslint-disable-next-line no-fallthrough
            case 109:
              {
                queue.push(chars + '{' + child + '}');
                break;
              }
            // k eyframes
            case 107:
              {
                chars = chars.substring(1);
                child = chars + '{' + child + '}';
                queue.push('@-webkit-' + child);
                queue.push('@' + child);
                parentQueue.push(_parent);
                break;
              }
            default:
              {
                queue.push(chars + child);
                break;
              }
          }
        }
    }
  };
});

export default index;
//# sourceMappingURL=index.es.js.map
